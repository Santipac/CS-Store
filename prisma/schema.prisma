// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    CLIENT
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    password      String?
    emailVerified DateTime?
    role          UserRole  @default(CLIENT)
    image         String?
    accounts      Account[]
    sessions      Session[]
    steamURL      String?   @unique
    tradelink     String?
    orders        Order[]
    wishList      String[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String   @id @default(cuid())
    name        String
    slug        String
    wear        String?
    type        String
    description String?
    float       Float?
    statTrak    Boolean? @default(false)
    image       String
    price       Float
    inStock     Float
    tradelock   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum OrderStatus {
    DELIVERED
    PENDING
}

model Order {
    id            String      @id @default(cuid())
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    orderItems    OrderItem[]
    numberOfItems Int
    status        OrderStatus @default(PENDING)
    total         Float
    isPaid        Boolean     @default(false)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model OrderItem {
    id          String   @id @default(cuid())
    name        String
    slug        String
    wear        String?
    type        String
    description String?
    float       Float?
    statTrak    Boolean? @default(false)
    image       String
    price       Float
    inStock     Float
    tradelock   String
    quantity    Float
    order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId     String
    productId   String
}
